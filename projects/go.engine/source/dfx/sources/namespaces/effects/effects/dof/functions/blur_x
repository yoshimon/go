/*!
    Performs a horizontal gaussian blur.

    \param globalTID The global TID.
 */
[numthreads(1, DFX_DOF_BLUR_X_THREADS_Y, 1)]
void $(in uint3 globalTID : SV_DispatchThreadID)
{
    static const int blurWidth = 9;
    static const int halfBlurWidth = 4;
    static const float blurWeights[blurWidth * blurWidth] =
    {
        0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0.00135, 0.157305, 0.682689, 0.157305, 0.00135, 0, 0,
        0.000229, 0.005977, 0.060598, 0.241732, 0.382928, 0.241732, 0.060598, 0.005977, 0.000229,
        0.008488, 0.038078,0.111165, 0.211357, 0.261824, 0.211357, 0.111165, 0.038078, 0.008488,
        0.028532, 0.067234,0.124009, 0.179044, 0.20236, 0.179044, 0.124009, 0.067234, 0.028532,
        0.048297, 0.08393,0.124548, 0.157829, 0.170793, 0.157829, 0.124548, 0.08393, 0.048297,
        0.063327, 0.093095,0.122589, 0.144599, 0.152781, 0.144599, 0.122589, 0.093095, 0.063327,
        0.074095, 0.098408,0.120521, 0.136107, 0.141738, 0.136107, 0.120521, 0.098408, 0.074095,
        0.081812, 0.101701, 0.118804, 0.130417, 0.134535, 0.130417, 0.118804, 0.101701, 0.081812
    };

    int3 base = int3(globalTID.x * DFX_DOF_BLUR_X_THREADS_X, globalTID.y, 0);

    // Local cache
    float4 input[blurWidth + DFX_DOF_BLUR_X_THREADS_X];

    // Load image data into local memory (centered at base)
    [unroll]
    for(int i = 0; i < blurWidth + DFX_DOF_BLUR_X_THREADS_X; ++i)
    {
    	input[i] = float4
        (
            ::effects::dof::colorTexture.Load(base, int2(i - halfBlurWidth, 0)).rgb, // Color
            ::effects::dof::cocTexture.Load(base, int2(i - halfBlurWidth, 0)) // CoC
        );
    }

    // Perform blur
    for(int x = 0; x < DFX_DOF_BLUR_X_THREADS_X; ++x)
    {
        // Center = halfBlurWidth
        const float4 centerPixel = input[x + halfBlurWidth];
        const float coc = centerPixel.w;
        const float centerBlurWidth = abs(coc);
        if(centerBlurWidth > 0.f)
        {
            float4 output = 0.0f;
            const int wi = (int)(clamp(centerBlurWidth, 0.0, blurWidth - 1)) * blurWidth;
        	[unroll]
            for(int i = 0; i < blurWidth; ++i)
        	{
                const float4 colCoC = input[x + i];
                output += blurWeights[wi + i] *
                (
                    coc < 0.f ? // Determine which half-side we are on
                        colCoC : //(coc < colCoC.a ? colCoC : centerPixel) : // Near-blur (closer objects gather color from behind)
                        (colCoC.a != 0.f ? colCoC : centerPixel) // Far blur (gather and scatter if not in focus region)
                );
        	}

            ::effects::dof::destTextureRW[base.xy + int2(x, 0)] = float4(output.rgb, 1);
        }
        else
        {
            ::effects::dof::destTextureRW[base.xy + int2(x, 0)] = centerPixel;
        }
    }
}
