/*!
    Performs a vertical gaussian blur.

    \param globalTID The global TID.
 */
[numthreads(DFX_GAUSSIAN_BLUR_Y_THREADS_X, 1, 1)]
void $(in uint3 globalTID : SV_DispatchThreadID)
{
    static const int blurWidth = 9;
    static const int halfBlurWidth = 4;
    static const float blurWeights[blurWidth] =
    {
    	0.004815026f,
    	0.028716039f,
    	0.102818575f,
    	0.221024189f,
    	0.28525234f,
    	0.221024189f,
    	0.102818575f,
    	0.028716039f,
    	0.004815026f
    };

    int3 base = int3(globalTID.x, globalTID.y * DFX_GAUSSIAN_BLUR_Y_THREADS_Y, ::constants::gaussian_blur::g_gaussianBlurMipLevel);

    // Local cache
    float4 input[blurWidth + DFX_GAUSSIAN_BLUR_Y_THREADS_Y];

    // Load image data into local memory (centered at base)
    [unroll]
    for(int i = 0; i < blurWidth + DFX_GAUSSIAN_BLUR_Y_THREADS_Y; ++i)
    {
    	input[i] = ::resources::gaussian_blur::sourceTexture.Load(base, int2(0, i - halfBlurWidth));
    }

    // Perform blur
    [unroll]
    for(int y = 0; y < DFX_GAUSSIAN_BLUR_Y_THREADS_Y; ++y)
    {
    	float4 output = 0.0f;
    	[unroll]
        for(int i = 0; i < blurWidth; ++i)
    	{
    		output += input[y + i] * blurWeights[i];
    	}

    	::resources::gaussian_blur::destTextureRW[base.xy + int2(0, y)] = output;
    }
}
