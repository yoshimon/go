/*!
    Calculates the amount of reflection for a given fragment in screen-space.

    \param viewDirWS The view vector pointing to the camera in world-space.
    \param normalWS The surface normal in world-space.
    \param albedo The surface albedo.
    \param metallic The surface metallic value.
    \param roughness The surface roughness value.

    \return The reflection color.
 */
float3 $(
    const float3 viewDirWS,
    const float3 normalWS,
    const float3 albedo,
    const float metallic,
    const float roughness,
    const Texture2D<float2> envBRDF,
    const TextureCube<float4> envMap)
{
    const float3 rWS = reflect(-viewDirWS, normalWS);
    const float nv = dot(normalWS, viewDirWS);

    // TODO: use specular dominant direction instead of R

    float linearRoughness = roughness * roughness;

    // Compute fresnel
    const float3 h = normalize(viewDirWS + rWS);
    const float lh = saturate(dot(h, rWS));
    const float3 f0 = ::functions::lighting::standard::F_0(albedo, metallic);

    const float3 specularColor = approximate_specular_ibl(f0, linearRoughness, nv, rWS, envBRDF, envMap);

    return ::functions::lighting::standard::F_Schlick(f0, ::functions::lighting::standard::F_90(f0), lh) * specularColor;
}
